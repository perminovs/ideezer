"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%frkmb6#d!l*-1mniyc1%(3@d*ujz7tjwd0wexs_rn$ic1f*2$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
INTERNAL_IPS = ['127.0.0.1', 'localhost']

LOGIN_URL = '/ideezer/auth'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ideezer.apps.IdeezerConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

_db_params = {
    'ENGINE': os.environ.get('DB_ENGINE', None),
    'NAME': os.environ.get('DB_NAME', None),
    'USER': os.environ.get('DB_USER', None),
    'PASSWORD': os.environ.get('DB_PASSWORD', None),
    'HOST': os.environ.get('DB_HOST', None),
    'PORT': os.environ.get('DB_PORT', None),
}
if all(_db_params.values()):
    DATABASES['default'] = _db_params
else:
    import logging
    logger = logging.getLogger()
    logger.warning('run with sqlite db')

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'general': {
            'format': '[%(asctime)s] <%(levelname)s> %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'general',
        },
        'file': {
            'class': 'logging.FileHandler',
            'formatter': 'general',
            'filename': os.path.join(os.getcwd(), 'log.log'),
        },
    },

    'loggers': {
        'ideezer': {
            'level': 'INFO',
            'handlers': ['console', 'file'],
        }
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'


# Deezer app params
DEEZER_APP_ID = os.environ.get('DEEZER_APP_ID', None)
DEEZER_APP_NAME = os.environ.get('DEEZER_APP_NAME', None)
DEEZER_SECRET_KEY = os.environ.get('DEEZER_SECRET_KEY', None)
DEEZER_BASE_PERMS = 'basic_access,email'

for param, name in zip(
    (DEEZER_APP_ID, DEEZER_APP_NAME, DEEZER_SECRET_KEY),
    ('DEEZER_APP_ID', 'DEEZER_APP_NAME', 'DEEZER_SECRET_KEY'),
):
    if not param:
        import logging
        logger = logging.getLogger()
        logger.warning('env var `%s` is not defined', name)
